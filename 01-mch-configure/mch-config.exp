#!/usr/bin/expect -f

# Our SSH takes a while to connect
set timeout 120

set send_slow {1 .1}
proc send {ignore arg} {
    sleep .1
    exp_send -s -- $arg
}

if { $argc < 3 } {
    puts "\[ERROR\] rnsufficient arguments provided!"
    puts "Usage: ./mch_config.exp <Connection Type> [<MCH IP> <MCH Password>] <FTP Server Address> <MCH Hostname>"
    exit 1
}

set type [lindex $argv 0]

if { [string equal "$type" "ssh"] } {
    set mchipaddr [lindex $argv 1]
    set mchpass [lindex $argv 2]
    set ipaddr [lindex $argv 3]
    set mchhostname [lindex $argv 4]
} elseif { [string equal "$type" "serial"] } {
    set ipaddr [lindex $argv 1]
    set mchhostname [lindex $argv 2]
} else {
    puts "Invalid <type> argument. Options are: \"ssh\" \"serial\""
    exit 1
}


if { [string equal "$type" "ssh"] } {
    spawn ssh -o StrictHostKeyChecking=no root@$mchipaddr
    expect "root@$mchipaddr's password:*"
    send -- "$mchpass\r"
} elseif { [string equal "$type" "serial"] } {
    #Connect to the MCH via serial port
    spawn cu -l /dev/ttyACM0 -s 19200
    match_max 100000
    expect "Connected.\r"
}

#Send a bogus command to clear any garbage that may have been sent before or during connection
send -- "\r"
expect "nat> "

#Change MCH hostname
send -- "mchcfg\r"
expect "*Enter configuration mode (RET=0/0x0):*"
send -- "11\r"
expect "*Enter host name:*"
send -- "\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010$mchhostname\r"
expect "*Enter configuration mode (RET=0/0x0):*"
send -- "q\r"
expect "nat> "

#Update RTM Atmel release information
send -- "diag\r"
expect "*DIAG*"
send -- "11\r"
expect "*AVR*"
send -- "5\r"
expect "pw>"
send -- "rosebud\r"
expect "Choose AVR device*"
send -- "5\r"
expect "Enter type*"
send -- "\r"
expect "Enter serial number*"
send -- "\r"
expect "Enter release code (with preceding 0x)*"
send -- "0x171113\r"
expect "Enter PCB version*"
send -- "\r"
expect "*AVR*"
send -- "q\r"
expect "*DIAG*"
send -- "q\r"
expect "nat> "


#Update clock configuration
send -- "upload_cfg\r"
expect ":>"
send -- "$ipaddr:mch_clk_cfg.txt\r"
expect "Set configuration from file?*"
send -- "y\r"
expect "Save configuration to FLASH memory?*"
send -- "y\r"
expect "nat> "


#Enable SSH
send -- "mchcfg\r"
expect "Enter configuration mode*"
send -- "3\r"
expect "Enable RMCP access (y/n)*"
send -- "y\r"
expect "Enable telnet access (y/n)*"
send -- "y\r"
expect "Enable WEB access (y/n)*"
send -- "y\r"
# Enable SSH
expect "Enable ssh access (y/n)*"
send -- "y\r"
# Use DHCP
expect "Enter IP address source Mgmt*"
send -- "2\r"
expect "Enter session activity timeout*"
send -- "\r"
expect "Enter session activity timeout*"
send -- "\r"
expect "Enter default fan level*"
send -- "\r"
expect "Enable watch dog timer*"
send -- "\r"
expect "Enable alternative cooling scheme*"
send -- "\r"
expect "Telnet inactivity timeout*"
send -- "\r"
expect "Enable PM relaxed assignment*"
send -- "\r"
expect "Enter configuration mode*"
send -- "q\r"
expect "nat> "


# Update MCH Firmware version
send -- "update_firmware\r"
expect "*firmware>"
send -- "$ipaddr:mch_fw.bin\r"
expect "TFTP:*"
expect "erasing sector*"
expect "program EEPROM*"
expect "verify EEPROM*"
expect "successful*"
expect "nat> "


#Reboot MCH
send -- "reboot\r"

#Close serial connection
send -- "\r~."

puts "MCH is configured correctly and is rebooting now!"
